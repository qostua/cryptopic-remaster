{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"app.js","sourcesContent":["let encryption = document.querySelector(\".encryption\");\r\n\r\nlet encryptionToggle = document.querySelector(\".encryption_toggle\");\r\n\r\nencryption.classList.remove(\"encryption--encrypt\");\r\nencryption.classList.remove(\"encryption--decipher\");\r\n\r\nif (encryptionToggle.checked) {\r\n  encryption.classList.add(\"encryption--decipher\");\r\n} else {\r\n  encryption.classList.add(\"encryption--encrypt\");\r\n}\r\n\r\nencryptionToggle.addEventListener(\"click\", function() {\r\n  encryption.className = \"encryption\";\r\n  encryptToggleFileText.textContent = \"текст\";\r\n  decipherToggleFileText.textContent = \"текст\";\r\n\r\n  if (encryptionToggle.checked) {\r\n    encryption.classList.add(\"encryption--decipher\");\r\n  } else {\r\n    encryption.classList.add(\"encryption--encrypt\");\r\n  }\r\n});\r\n\r\n\r\nencryptToggleFileText = document.querySelector(\".encryption_toggle-label--encrypt .encryption_toggle-label-btn--text\");\r\n\r\nencryptToggleFileText.addEventListener(\"click\", function() {\r\n  encryption.className = \"encryption\";\r\n  if (encryptToggleFileText.textContent == \"текст\") {\r\n    encryptToggleFileText.textContent = \"файл\";\r\n    encryption.classList.add(\"encryption--encrypt-file\");\r\n  } else if (encryptToggleFileText.textContent == \"файл\") {\r\n    encryptToggleFileText.textContent = \"текст\";\r\n    encryption.classList.add(\"encryption--encrypt\");\r\n  }\r\n});\r\n\r\ndecipherToggleFileText = document.querySelector(\".encryption_toggle-label--decipher .encryption_toggle-label-btn--text\");\r\n\r\ndecipherToggleFileText.addEventListener(\"click\", function() {\r\n  encryption.className = \"encryption\";\r\n  if (decipherToggleFileText.textContent == \"текст\") {\r\n    decipherToggleFileText.textContent = \"файл\";\r\n    encryption.classList.add(\"encryption--decipher-file\");\r\n  } else if (decipherToggleFileText.textContent == \"файл\") {\r\n    decipherToggleFileText.textContent = \"текст\";\r\n    encryption.classList.add(\"encryption--decipher\");\r\n  }\r\n});\r\n\r\n\r\nlet encryptionData = {\r\n  file: {},\r\n  addPicture(data, width, height, type) {\r\n    this.picture = {\r\n      data: data,\r\n      width: width,\r\n      height: height,\r\n      type: type,\r\n    }\r\n  },\r\n  addFileData(data) {\r\n    this.file.data = data;\r\n  },\r\n  addFileName(name) {\r\n    this.file.name = name;\r\n  },\r\n  addMessage(text) {\r\n    this.message = text;\r\n  },\r\n  addOperationType(type) {\r\n    this.operationType = type;\r\n  },\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlet formEncrypt = document.querySelector(\".encryption_form--encrypt\");\r\n\r\nlet encryptBtnNext = formEncrypt.querySelector(\".encryption_form-btn--next\");\r\nlet encryptBtnBack = formEncrypt.querySelector(\".encryption_form-btn--back\");\r\n\r\nlet formEncryptSteps = formEncrypt.querySelectorAll(\".encryption_form-step\");\r\nlet formEncryptStepsArray = Array.from(formEncryptSteps);\r\n\r\nlet encryptPic = formEncrypt.querySelector(\".encryption_form-encrypt-pic\");\r\n\r\nlet encryptGoNextStep = function () {\r\n  if (formEncrypt.dataset.stepCount == 1) {\r\n    formEncrypt.dataset.stepCount = +formEncrypt.dataset.stepCount + 1;\r\n  } else if (formEncrypt.dataset.stepCount == 2) {\r\n    let cookie = document.cookie;\r\n    let csrfToken = cookie.substring(cookie.indexOf('=') + 1);\r\n    console.log(encryptionData);\r\n    fetch(\r\n      // '/req',\r\n      'https://jsonplaceholder.typicode.com/posts',\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-Requested-With' : 'XMLHttpRequest',\r\n          'X-CSRFToken': csrfToken\r\n        },\r\n        body: JSON.stringify(encryptionData),\r\n      })\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        encryptPic.src = json.picture.data;\r\n        console.log(json);\r\n        formEncrypt.dataset.stepCount = +formEncrypt.dataset.stepCount + 1;\r\n      });\r\n\r\n  }\r\n}\r\nlet encryptGoBackStep = function () {\r\n  formEncrypt.dataset.stepCount = +formEncrypt.dataset.stepCount - 1;\r\n}\r\n\r\nencryptBtnNext.addEventListener(\"click\", encryptGoNextStep);\r\nencryptBtnBack.addEventListener(\"click\", encryptGoBackStep);\r\n\r\nlet formEncryptInputFile = formEncrypt.querySelector(\".encryption_form-picture-input\");\r\nlet formEncryptInputText = formEncrypt.querySelector(\".encryption_form-text-input\");\r\nlet formEncryptImage = formEncrypt.querySelector(\".encryption_form-downloaded-pic\");\r\n\r\nlet toggleDownloadedPic = function(form, countPic = \"\") {\r\n  form.classList.add(`encryption_form--downloaded-pic${countPic}`);\r\n}\r\n\r\nlet convertBase64 = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.readAsDataURL(file);\r\n\r\n    fileReader.onload = () => {\r\n      resolve(fileReader.result);\r\n    };\r\n\r\n    fileReader.onerror = (error) => {\r\n      reject(error);\r\n    };\r\n  });\r\n};\r\n\r\nlet uploadImage = async (event, image) => {\r\n  const file = event.target.files[0];\r\n  const base64 = await convertBase64(file);\r\n  image.src = base64;\r\n};\r\n\r\nlet declareDataEncrypt = function(image, message) {\r\n  let imageWidth = image.naturalWidth;\r\n  let imageHeight = image.naturalHeight;\r\n  let imageType = image.src.slice(image.src.indexOf(\"/\") + 1, image.src.indexOf(\";\"));\r\n\r\n  encryptionData.addPicture(image.src, imageWidth, imageHeight, imageType);\r\n  encryptionData.addMessage(message);\r\n  encryptionData.addOperationType(\"encrypt-text\");\r\n}\r\n\r\nformEncryptInputFile.addEventListener(\"change\", (e) => {\r\n  uploadImage(e, formEncryptImage);\r\n  toggleDownloadedPic(formEncrypt);\r\n  formEncryptImage.onload = function() {\r\n    declareDataEncrypt(formEncryptImage, formEncryptInputText.value);\r\n  };\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet formEncryptFile = document.querySelector(\".encryption_form--encrypt-file\");\r\n\r\nlet encryptFileBtnNext = formEncryptFile.querySelector(\".encryption_form-btn--next\");\r\nlet encryptFileBtnBack = formEncryptFile.querySelector(\".encryption_form-btn--back\");\r\n\r\nlet formEncryptFileSteps = formEncryptFile.querySelectorAll(\".encryption_form-step\");\r\nlet formEncryptFileStepsArray = Array.from(formEncryptSteps);\r\n\r\nlet encryptFilePic = formEncryptFile.querySelector(\".encryption_form-encrypt-pic\");\r\n\r\nlet encryptFileGoNextStep = function () {\r\n  if (formEncryptFile.dataset.stepCount == 1) {\r\n    formEncryptFile.dataset.stepCount = +formEncryptFile.dataset.stepCount + 1;\r\n    console.log(encryptionData);\r\n  } else if (formEncryptFile.dataset.stepCount == 2) {\r\n    let cookie = document.cookie;\r\n    let csrfToken = cookie.substring(cookie.indexOf('=') + 1);\r\n    fetch(\r\n      // '/req',\r\n      'https://jsonplaceholder.typicode.com/posts',\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-Requested-With' : 'XMLHttpRequest',\r\n          'X-CSRFToken': csrfToken\r\n        },\r\n        body: JSON.stringify(encryptionData),\r\n      })\r\n      .then((response) => response.json())\r\n      .then((json) => {\r\n        console.log(json);\r\n        encryptFilePic.src = json.picture.data\r\n        formEncryptFile.dataset.stepCount = +formEncryptFile.dataset.stepCount + 1;\r\n      });\r\n\r\n  }\r\n}\r\nlet encryptFileGoBackStep = function () {\r\n  formEncryptFile.dataset.stepCount = +formEncryptFile.dataset.stepCount - 1;\r\n}\r\n\r\nencryptFileBtnNext.addEventListener(\"click\", encryptFileGoNextStep);\r\nencryptFileBtnBack.addEventListener(\"click\", encryptFileGoBackStep);\r\n\r\nlet formEncryptFileInputFile = formEncryptFile.querySelector(\".encryption_form-step[data-step='1'] .encryption_form-picture-input\");\r\nlet formEncryptFileInputPic = formEncryptFile.querySelector(\".encryption_form-step[data-step='2'] .encryption_form-picture-input\");\r\n\r\nlet formEncryptFileImage = formEncryptFile.querySelector(\".encryption_form-step[data-step='2'] .encryption_form-downloaded-pic\");\r\n\r\nlet declareDataEncryptFile = function(image) {\r\n  let imageWidth = image.naturalWidth;\r\n  let imageHeight = image.naturalHeight;\r\n  let imageType = image.src.slice(image.src.indexOf(\"/\") + 1, image.src.indexOf(\";\"));\r\n\r\n  encryptionData.addPicture(image.src, imageWidth, imageHeight, imageType);\r\n  encryptionData.addOperationType(\"encrypt-file\");\r\n}\r\n\r\nformEncryptFileInputFile.addEventListener(\"change\", (e) => {\r\n  formEncryptFile.classList.add(\"encryption_form--downloaded-file\");\r\n\r\n  let files = formEncryptFileInputFile.files;\r\n  encryptionData.addFileName(files[0].name);\r\n  processFile(files[0], compressData, files[0].name + '.lz4');\r\n});\r\n\r\nformEncryptFileInputPic.addEventListener(\"change\", (e) => {\r\n  uploadImage(e, formEncryptFileImage);\r\n  toggleDownloadedPic(formEncryptFile);\r\n  formEncryptFileImage.onload = function() {\r\n    declareDataEncryptFile(formEncryptFileImage);\r\n  };\r\n  console.log(encryptionData);\r\n});\r\n\r\n\r\n\r\nlet formDecipher = document.querySelector(\".encryption_form--decipher\");\r\n\r\nlet decipherBtnNext = formDecipher.querySelector(\".encryption_form-btn--next\");\r\nlet decipherBtnBack = formDecipher.querySelector(\".encryption_form-btn--back\");\r\nlet formDecipherSteps = formDecipher.querySelectorAll(\".encryption_form-step\");\r\nlet formDecipherStepsArray = Array.from(formDecipherSteps);\r\n\r\nlet encryptText = formDecipher.querySelector(\".encryption_form-text-input\");\r\n\r\nlet decipherGoNextStep = function () {\r\n  let cookie = document.cookie;\r\n  let csrfToken = cookie.substring(cookie.indexOf('=') + 1);\r\n  console.log(encryptionData);\r\n  fetch(\r\n    // '/req',\r\n    'https://jsonplaceholder.typicode.com/posts',\r\n    {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'X-Requested-With' : 'XMLHttpRequest',\r\n        'X-CSRFToken': csrfToken\r\n      },\r\n      body: JSON.stringify(encryptionData),\r\n    })\r\n    .then((response) => response.json())\r\n    .then((json) => {\r\n      encryptText.value = json.message;\r\n      formDecipher.dataset.stepCount = +formDecipher.dataset.stepCount + 1;\r\n    });\r\n}\r\nlet decipherGoBackStep = function () {\r\n  formDecipher.dataset.stepCount = +formDecipher.dataset.stepCount - 1;\r\n}\r\n\r\ndecipherBtnNext.addEventListener(\"click\", decipherGoNextStep);\r\ndecipherBtnBack.addEventListener(\"click\", decipherGoBackStep);\r\n\r\nlet formDecipherInputFile = formDecipher.querySelector(\".encryption_form-step[data-step='1'] .encryption_form-picture-input\");\r\nlet formDecipherImage = formDecipher.querySelector(\".encryption_form-step[data-step='1'] .encryption_form-downloaded-pic\");\r\n\r\nlet declareDataDecipher = function(image) {\r\n  encryptionData.addOperationType(\"decipher-text\");\r\n\r\n  let imageWidth = image.naturalWidth;\r\n  let imageHeight = image.naturalHeight;\r\n  let imageType = image.src.slice(image.src.indexOf(\"/\") + 1, image.src.indexOf(\";\"));\r\n\r\n  encryptionData.addPicture(image.src, imageWidth, imageHeight, imageType);\r\n}\r\n\r\nformDecipherInputFile.addEventListener(\"change\", (e) => {\r\n  uploadImage(e, formDecipherImage);\r\n  toggleDownloadedPic(formDecipher, 1);\r\n  formDecipherImage.onload = function() {\r\n    declareDataDecipher(formDecipherImage);\r\n  };\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet formDecipherFile = document.querySelector(\".encryption_form--decipher-file\");\r\n\r\nlet decipherFileBtnNext = formDecipherFile.querySelector(\".encryption_form-btn--next\");\r\n\r\n\r\nlet decipherFileGoNextStep = function () {\r\n  let cookie = document.cookie;\r\n  let csrfToken = cookie.substring(cookie.indexOf('=') + 1);\r\n  console.log(encryptionData);\r\n  fetch(\r\n    // '/req',\r\n    'https://jsonplaceholder.typicode.com/posts',\r\n    {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'X-Requested-With' : 'XMLHttpRequest',\r\n        'X-CSRFToken': csrfToken\r\n      },\r\n      body: JSON.stringify(encryptionData),\r\n    })\r\n    .then((response) => response.json())\r\n    .then((json) => {\r\n      fetch(json.file.data)\r\n      .then(res => res.blob())\r\n      .then(function(myBlob) {\r\n        let file = new File([myBlob], {type: myBlob.type});\r\n\r\n        processFile(file, decompressData, myBlob.type);\r\n      });\r\n    });\r\n}\r\n\r\ndecipherFileBtnNext.addEventListener(\"click\", decipherFileGoNextStep);\r\n\r\nlet formDecipherFileInputFile = formDecipherFile.querySelector(\".encryption_form-step[data-step='1'] .encryption_form-picture-input\");\r\nlet formDecipherFileImage = formDecipherFile.querySelector(\".encryption_form-step[data-step='1'] .encryption_form-downloaded-pic\");\r\n\r\nlet declareDataDecipherFile = function(image) {\r\n  encryptionData.addOperationType(\"decipher-file\");\r\n\r\n  let imageWidth = image.naturalWidth;\r\n  let imageHeight = image.naturalHeight;\r\n  let imageType = image.src.slice(image.src.indexOf(\"/\") + 1, image.src.indexOf(\";\"));\r\n\r\n  encryptionData.addPicture(image.src, imageWidth, imageHeight, imageType);\r\n}\r\n\r\nformDecipherFileInputFile.addEventListener(\"change\", (e) => {\r\n  uploadImage(e, formDecipherFileImage);\r\n  toggleDownloadedPic(formDecipherFile, 1);\r\n  formDecipherFileImage.onload = function() {\r\n    declareDataDecipherFile(formDecipherFileImage);\r\n  };\r\n});\r\n\r\n//# sourceMappingURL=app.js.map\r\n"]}